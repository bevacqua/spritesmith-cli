#!/usr/bin/env node

'use strict';

var fs = require('fs');
var path = require('path');
var mkdirp = require('mkdirp');
var url = require('url2');
var contra = require('contra');
var templater = require('spritesheet-templates');
var multi = require('multi-glob');
var spritesmith = require('..');
var formats = require('../lib/formats');
var argv = require('minimist')(process.argv.slice(2));
var dataSource = argv.rc || path.resolve('./.spritesmith.js');
var data = require(path.resolve(dataSource));

if (Array.isArray(data)) {
  contra.each(data, run, noop);
} else {
  run(data);
}

function run (data) {
  contra.waterfall([
    function (next) {
      multi.glob(data.src, next);
    },
    function (files, next) {
      spritesmith.run({
        src: files,
        engine: data.engine || 'pixelsmith',
        algorithm: data.algorithm || 'binary-tree',
        algorithmOpts: data.algorithmOpts || {},
        padding: data.padding || 0,
        exportOpts: {
          format: formats.img.get(data.destImage) || 'png',
          quality: data.quality || 100
        },
        cssVarMap: data.cssVarMap,
        cssTemplate: data.cssTemplate,
        cssOpts: data.cssOpts,
        cssFormat: data.cssFormat,
        destImage: data.destImage,
        destCSS: data.destCSS
      }, next);
    }
  ], handle);

  function handle (err, result) {
    if (err) {
      throw err;
    }
    persist(result, data);
  }
}

function createImage (result, data) {

  if (!data.destImage) { return; }

  mkdirp.sync(path.dirname(data.destImage));
  fs.writeFileSync(data.destImage, result.image, 'binary');

  console.log('[spritesmith] "%s" created.', data.destImage);
}

function createCSS (result, data) {

  if (!data.destCSS) { return; }

  var coordinates = result.coordinates;
  var properties = result.properties;
  var spritePath = data.imgPath || url.relative(data.destCSS, data.destImage);
  var cssVarMap = data.cssVarMap || noop;
  var cleanCoords = [];

  Object.keys(coordinates).sort().forEach(function cleanup (file) {
    var fullname = path.basename(file);
    var nameParts = fullname.split('.');
    if (nameParts.length > 1) {
      nameParts.pop();
    }
    var name = nameParts.join('.');
    var coords = coordinates[file];

    coords.name = name;
    coords = cssVarMap(coords) || coords;
    cleanCoords.push(coords);
  });

  var cssFormat = 'spritesmith-custom';
  var cssOptions = data.cssOpts || {};

  if (data.cssTemplate) {
    if (typeof data.cssTemplate === 'function') {
      templater.addTemplate(cssFormat, data.cssTemplate);
    } else {
      templater.addHandlebarsTemplate(cssFormat, fs.readFileSync(data.cssTemplate, 'utf8'));
    }
  } else {
    cssFormat = data.cssFormat || formats.css.get(data.destCSS) || 'json';
  }

  var cssStr = templater({
    sprites: cleanCoords,
    spritesheet: {
      width: properties.width,
      height: properties.height,
      image: spritePath
    }
  }, {
    format: cssFormat,
    formatOpts: cssOptions
  });

  mkdirp.sync(path.dirname(data.destCSS));
  fs.writeFileSync(data.destCSS, cssStr, 'utf8');

  console.log('[spritesmith] "%s" created.', data.destCSS);

}

function persist (result, data) {
  createImage(result, data);
  createCSS(result, data);
}

function noop () {}
